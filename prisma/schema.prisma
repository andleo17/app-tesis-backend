generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model QuestionCategory {
  id          Int        @id
  name        String
  description String
  questions   Question[]
}

model Question {
  label              String           @id @db.VarChar(30)
  content            String
  isMultipleChoice   Boolean          @default(false)
  questionCategoryId Int
  options            QuestionOption[]
  category           QuestionCategory @relation(fields: [questionCategoryId], references: [id])
}

model QuestionOption {
  position      Int
  questionLabel String   @db.VarChar(30)
  content       String
  question      Question @relation(fields: [questionLabel], references: [label])

  @@id([questionLabel, position])
}

model ComponentType {
  id          Int         @id
  slug        String      @unique
  name        String
  description String
  components  Component[]
}

model Component {
  id             Int           @id @default(autoincrement())
  frabricId      String        @unique
  deltronId      String?       @unique
  typeId         Int
  image          String?
  brand          String
  model          String
  suggestedPrice Float?
  rgb            Boolean?
  type           ComponentType @relation(fields: [typeId], references: [id])
  cpu            Cpu?
  ram            Ram?
  motherboard    Motherboard?
  gpu            Gpu?
  powerSupply    PowerSupply?
  storage        Storage?
}

model Cpu {
  componentId            Int       @id
  family                 String
  generation             Int?
  platform               String
  specifier              String
  launchDate             DateTime?
  baseFrecuency          Float
  turboFrecuency         Float
  cores                  Int
  threads                Int
  cacheL2                Int?
  cacheL3                Int
  tdp                    Int
  lithography            String
  socket                 String
  maxTemperature         Int
  admitedMemory          String[]
  maxMemory              Int
  haveIntegratedGraphics Boolean
  graphicBaseFrecuency   Float?
  graphicMaxFrecuency    Float?
  graphicMaxResolution   String?
  component              Component @relation(fields: [componentId], references: [id])
}

model Ram {
  componentId Int       @id
  series      String?
  type        String
  voltage     Float
  frequency   Int
  capacity    Int
  format      String
  casLatency  Int
  component   Component @relation(fields: [componentId], references: [id])
}

model Motherboard {
  componentId              Int       @id
  socket                   String
  chipset                  String
  formFactor               String
  memoryFrecuencies        String[]
  memoryType               String
  memoryFormat             String
  memorySlots              Int
  memoryMaxCapacity        Int
  memoryDualChannel        Boolean
  memoryXMP                Boolean
  networkInterfaceMaxSpeed String
  hasWireless              Boolean
  supportMultiGraphics     Boolean
  powerSupply              String
  slotsPCIe                Int
  portsSATA                Int
  portsM2SATA              Int
  portsM2PCIe              Int
  portsUSB                 Int
  component                Component @relation(fields: [componentId], references: [id])
}

model Gpu {
  componentId          Int       @id
  family               String
  cores                Int
  memory               Int
  frecuency            Float
  maxResolution        String
  interface            String
  power                Int
  connectorHDMI        Int
  connectorDisplayPort Int
  pines                Int
  component            Component @relation(fields: [componentId], references: [id])
}

model PowerSupply {
  componentId Int       @id
  power       Int
  efficiency  String
  modularity  Int
  frequency   Int
  formFactor  String
  component   Component @relation(fields: [componentId], references: [id])
}

model Storage {
  componentId  Int       @id
  type         String
  capacity     Int
  capacityUnit String
  format       String
  interface    String
  haveSink     Boolean
  revolutions  Int?
  speedRead    Int?
  speedWrite   Int?
  component    Component @relation(fields: [componentId], references: [id])
}
